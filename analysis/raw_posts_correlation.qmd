
# Outline

```{python}
#| label: imports
#| echo: false
#| output: false
from google.oauth2 import service_account
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
sns.set_context("talk")
plt.rcParams.update({
    'figure.figsize': (8, 6),  # Adjust figure size for SVG
    'figure.dpi': 250,       # Set DPI for SVG output
    'svg.fonttype': 'none',   # Embed fonts in SVG for portability
    'font.size': 14,
    'axes.titlesize': 16,
    'axes.labelsize': 14,
    'xtick.labelsize': 12,
    'ytick.labelsize': 12,
    'legend.fontsize': 12,
    'figure.titlesize': 18,
    'legend.facecolor': 'white',
    'legend.framealpha':1
})
import pandas_gbq
import sys
import os
sys.path.append(os.path.abspath("../"))
from analysis.bq_queries import get_post_count_ili_sql, get_llm_ili_sql
from analysis.feature_eng import *
from analysis.model_evaluation import *
from analysis.load_dfs import *
credentials = service_account.Credentials.from_service_account_file(
    '../.gc_creds/digepizcde-71333237bf40.json')
```

```{python}
#| label: sql_raw_post counts
#| output: false

who_subset = 'flunet'
lang = 'fr'#'fr'
country_code = 'FRA' #"FRA"

ili_kws = [
    'grippe',  'rhume', 'fievre', 'courbature'
    # "Grippe", 'grippe', 'Schnupfen', 'Fieber', 'Muskelschmerzen'
]
ili_kws_sql = [f"'{x}'" for x in ili_kws]
```

```{python}
control_kws = ['travail', 'voiture', 'demain', 'sommeil']
# control_kws = ['Auto', 'morgen', 'Arbeit', 'arbeiten', 'schlafen', 'Schlaf']
control_kws_sql = [f"'{x}'" for x in control_kws]
```

```{python}
post_count_ili_sql ="SELECT * FROM `digepizcde.bsky_ili.bsky_ili_fr`"
```

```{python}
#| echo: false
#| output: false
post_count_ili_df = pandas_gbq.read_gbq(
   post_count_ili_sql, credentials=credentials
).set_index('date')
post_count_ili_df.index = pd.to_datetime(post_count_ili_df.index)
```


```{python}
post_count_ili_df['year'] = post_count_ili_df.index.year.astype("category")
post_count_ili_df['month'] = post_count_ili_df.index.month.astype("category")
post_count_ili_df['week'] = post_count_ili_df.index.isocalendar().week.astype("category")
post_count_ili_df['season'] = post_count_ili_df['month'].apply(assign_season).astype("category")
```


```{python}
weekly_words = load_weekly_words()
# weekly_words = weekly_words.loc[:,filter_vocab(weekly_words, min_weeks=24)]
# post_count_ili_df = post_count_ili_df.merge(weekly_words, left_index=True, right_index=True)
```



```{python}
llm_ili_sql = get_llm_ili_sql(
    ili_kws, lang, country_code
)
```

```{python}
#| echo: false
#| output: false
llm_ili_df = pandas_gbq.read_gbq(
    llm_ili_sql, credentials=credentials 
).set_index('date')
llm_ili_df.index = pd.to_datetime(llm_ili_df.index)
```

```{python}
import asyncio
from googletrans import Translator

async def translate_french_to_english(text):
    """
    Translates French text to English using the googletrans library.

    Args:
        text (str): The French text to translate.

    Returns:
        str: The translated English text, or None if an error occurs.
    """
    try:
        async with Translator() as translator:
            translation = await translator.translate(text, src='fr', dest='en')
            return translation.text
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
```